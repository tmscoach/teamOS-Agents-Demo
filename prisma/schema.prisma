generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model Agent {
  id                String              @id
  name              String              @unique
  type              String
  description       String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  FlowConfiguration FlowConfiguration[]

  @@index([name])
  @@index([type])
}

model AgentConfiguration {
  id              String   @id
  agentName       String
  version         Int
  prompts         Json
  flowConfig      Json
  extractionRules Json
  active          Boolean  @default(false)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  guardrailConfig Json?
  knowledgeConfig Json?
  toolsConfig     Json?

  @@unique([agentName, version])
  @@index([agentName, active])
}

model AgentEvent {
  id             String       @id
  conversationId String
  type           String
  agent          String
  content        String
  metadata       Json?
  timestamp      DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([type])
}

model Conversation {
  id                 String               @id
  teamId             String
  managerId          String
  currentAgent       String
  phase              String
  contextData        Json
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  metadata           Json?
  organizationId     String?
  AgentEvent         AgentEvent[]
  FlowCheckpoint     FlowCheckpoint[]
  GuardrailCheck     GuardrailCheck[]
  Message            Message[]
  VariableExtraction VariableExtraction[]

  @@index([managerId])
  @@index([organizationId])
  @@index([teamId])
}

model Document {
  id                String              @id @default(dbgenerated("(gen_random_uuid())::text"))
  title             String
  sourcePath        String              @unique
  documentType      DocumentType
  content           String
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  DocumentChunk     DocumentChunk[]
  QuestionnaireItem QuestionnaireItem[]

  @@index([documentType])
  @@index([documentType], map: "document_type_idx")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model DocumentChunk {
  id         String                 @id @default(dbgenerated("(gen_random_uuid())::text"))
  documentId String
  chunkIndex Int
  content    String
  embedding  Unsupported("vector")?
  metadata   Json?
  createdAt  DateTime               @default(now())
  Document   Document               @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([chunkIndex])
  @@index([documentId])
  @@index([embedding], map: "document_chunk_embedding_idx")
}

model FlowCheckpoint {
  id                String            @id
  conversationId    String
  flowConfigId      String
  state             String
  data              Json
  createdAt         DateTime          @default(now())
  Conversation      Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  FlowConfiguration FlowConfiguration @relation(fields: [flowConfigId], references: [id])

  @@index([conversationId])
  @@index([createdAt])
  @@index([flowConfigId])
}

model FlowConfiguration {
  id             String           @id
  agentId        String
  version        Int              @default(1)
  name           String
  config         Json
  isActive       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  FlowCheckpoint FlowCheckpoint[]
  Agent          Agent            @relation(fields: [agentId], references: [id])

  @@unique([agentId, version])
  @@index([agentId, isActive])
}

model GuardrailCheck {
  id             String       @id
  conversationId String
  agentName      String
  guardrailType  String
  input          String
  passed         Boolean
  severity       String?
  reasoning      String
  timestamp      DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([guardrailType])
  @@index([passed])
}

model Message {
  id             String       @id
  conversationId String
  role           String
  content        String
  agent          String?
  metadata       Json?
  timestamp      DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model QuestionnaireItem {
  id              String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  documentId      String
  questionId      String
  questionText    String
  responseOptions Json?
  scoringFormula  String?
  category        String?
  assessmentType  String
  metadata        Json?
  createdAt       DateTime @default(now())
  Document        Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, questionId])
  @@index([assessmentType])
  @@index([category])
  @@index([assessmentType], map: "questionnaire_assessment_type_idx")
  @@index([category], map: "questionnaire_category_idx")
}

model TMSAuthToken {
  id          String    @id
  userId      String    @unique
  tmsJwtToken String?
  tmsUserId   String?
  tmsOrgId    String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  User        User      @relation(fields: [userId], references: [id])
}

model Team {
  id                        String    @id
  name                      String
  managerId                 String
  department                String?
  maturityIndicators        Json?
  performanceData           Json?
  transformationStatus      String    @default("pending")
  currentProgram            String?
  programStartDate          DateTime?
  programEndDate            DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime
  organizationId            String?
  User_Team_managerIdToUser User      @relation("Team_managerIdToUser", fields: [managerId], references: [id])
  User_User_teamIdToTeam    User[]    @relation("User_teamIdToTeam")

  @@index([managerId])
  @@index([organizationId])
}

model User {
  id                        String        @id
  clerkId                   String        @unique
  email                     String        @unique
  name                      String?
  role                      UserRole      @default(MANAGER)
  teamId                    String?
  department                String?
  profileData               Json?
  engagementMetrics         Json?
  assessmentStatus          Json?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime
  imageUrl                  String?
  currentAgent              String?
  completedSteps            String[]      @default([])
  lastActivity              DateTime      @default(now())
  onboardingData            Json?
  deletedAt                 DateTime?
  journeyStatus             JourneyStatus @default(ONBOARDING)
  journeyPhase              JourneyPhase  @default(ONBOARDING)
  completedAssessments      Json?         @default("{}")
  viewedDebriefs            Json?         @default("{}")
  teamSignalsEligible       Boolean       @default(false)
  organizationId            String?
  organizationRole          String?
  TMSAuthToken              TMSAuthToken?
  Team_Team_managerIdToUser Team[]        @relation("Team_managerIdToUser")
  Team_User_teamIdToTeam    Team?         @relation("User_teamIdToTeam", fields: [teamId], references: [id])
  UserReport                UserReport[]

  @@index([clerkId])
  @@index([journeyPhase])
  @@index([journeyStatus])
  @@index([organizationId])
  @@index([teamId])
}

model VariableExtraction {
  id               String       @id
  conversationId   String
  agentName        String
  fieldName        String
  attempted        Boolean
  successful       Boolean
  extractedValue   String?
  confidence       Float?
  timestamp        DateTime     @default(now())
  extractionMethod String?
  Conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([extractionMethod])
  @@index([fieldName])
  @@index([successful])
}

model UserReport {
  id               String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId           String
  teamId           String?
  organizationId   String
  reportType       ReportType
  subscriptionId   String
  templateId       String
  rawHtml          String
  processedHtml    String?
  jsonData         Json?
  metadata         Json?
  processingStatus ProcessingStatus  @default(PENDING)
  processedAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  ReportAccessLog  ReportAccessLog[]
  ReportChunk      ReportChunk[]
  ReportImage      ReportImage[]
  User             User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([teamId])
  @@index([organizationId])
  @@index([reportType])
  @@index([subscriptionId])
  @@index([processingStatus])
}

model ReportImage {
  id                  String                 @id @default(dbgenerated("(gen_random_uuid())::text"))
  reportId            String
  originalUrl         String
  storagePath         String
  imageType           String
  altText             String?
  description         String?
  metadata            Json?
  createdAt           DateTime               @default(now())
  detailedDescription String?
  extractedData       Json?
  insights            String[]               @default([])
  embedding           Unsupported("vector")?
  UserReport          UserReport             @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([embedding], map: "report_image_embedding_idx")
}

model ReportChunk {
  id           String                 @id @default(dbgenerated("(gen_random_uuid())::text"))
  reportId     String
  sectionId    String
  sectionTitle String
  content      String
  chunkIndex   Int
  charCount    Int
  embedding    Unsupported("vector")?
  metadata     Json?
  createdAt    DateTime               @default(now())
  UserReport   UserReport             @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([sectionId])
  @@index([embedding], map: "report_chunk_embedding_idx")
}

model ReportAccessLog {
  id         String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  reportId   String
  accessedBy String
  accessType AccessType
  createdAt  DateTime   @default(now())
  UserReport UserReport @relation(fields: [reportId], references: [id])

  @@index([reportId])
  @@index([accessedBy])
  @@index([accessType])
}

enum DocumentType {
  HANDBOOK
  QUESTIONNAIRE
  REPORT
  RESEARCH
}

enum JourneyPhase {
  ONBOARDING
  ASSESSMENT
  DEBRIEF
  CONTINUOUS_ENGAGEMENT
}

enum JourneyStatus {
  ONBOARDING
  ACTIVE
  DORMANT
}

enum UserRole {
  TEAM_MEMBER
  MANAGER
  ADMIN
}

enum ReportType {
  TMP
  QO2
  TEAM_SIGNALS
  TEAM_SIGNALS_360
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AccessType {
  VIEW
  SEARCH
  SHARE
}
