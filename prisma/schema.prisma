// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// User model for team members and managers
model User {
  id                  String    @id @default(cuid())
  clerkId             String    @unique
  email               String    @unique
  name                String?
  role                UserRole  @default(TEAM_MEMBER)
  teamId              String?
  team                Team?     @relation(fields: [teamId], references: [id])
  managedTeams        Team[]    @relation("TeamManager")
  department          String?
  profileData         Json?     // Stores profile data from TMS assessments
  engagementMetrics   Json?
  assessmentStatus    Json?     // Tracks completion status of various assessments
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@index([teamId])
  @@index([clerkId])
}

// Team model
model Team {
  id                    String    @id @default(cuid())
  name                  String
  managerId             String
  manager               User      @relation("TeamManager", fields: [managerId], references: [id])
  members               User[]
  department            String?
  maturityIndicators    Json?     // Team maturity based on TMS methodology
  performanceData       Json?     // Historical performance metrics
  transformationStatus  String    @default("pending")
  currentProgram        String?   // Current TMS program (e.g., "TMP", "QO2", etc.)
  programStartDate      DateTime?
  programEndDate        DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([managerId])
}

// Enum for user roles
enum UserRole {
  TEAM_MEMBER
  MANAGER
  ADMIN
}

// Conversation model for agent interactions
model Conversation {
  id                String      @id @default(cuid())
  teamId            String
  managerId         String
  currentAgent      String
  phase             String      // TransformationPhase: onboarding, assessment, analysis, transformation, monitoring
  contextData       Json        // Stores full AgentContext
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  messages          Message[]
  events            AgentEvent[]
  
  @@index([teamId])
  @@index([managerId])
}

// Message model for conversation history
model Message {
  id                String      @id @default(cuid())
  conversationId    String
  role              String      // user, assistant, system
  content           String      @db.Text
  agent             String?
  metadata          Json?
  timestamp         DateTime    @default(now())
  
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}

// Agent event model for tracking agent activities
model AgentEvent {
  id                String      @id @default(cuid())
  conversationId    String
  type              String      // message, handoff, tool_call, tool_output, context_update, guardrail
  agent             String
  content           String      @db.Text
  metadata          Json?
  timestamp         DateTime    @default(now())
  
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([type])
}

// Document model for TMS intellectual property
model Document {
  id                String      @id @default(cuid())
  title             String
  sourcePath        String      @unique
  documentType      DocumentType
  content           String      @db.Text
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  chunks            DocumentChunk[]
  questionnaireItems QuestionnaireItem[]
  
  @@index([documentType])
}

// Document chunks for vector search
model DocumentChunk {
  id                String      @id @default(cuid())
  documentId        String
  chunkIndex        Int
  content           String      @db.Text
  embedding         Json?       // Temporarily store as JSON
  metadata          Json?       // section, headers, context
  createdAt         DateTime    @default(now())
  
  document          Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([chunkIndex])
}

// Questionnaire items for structured retrieval
model QuestionnaireItem {
  id                String      @id @default(cuid())
  documentId        String
  questionId        String
  questionText      String      @db.Text
  responseOptions   Json?
  scoringFormula    String?
  category          String?
  assessmentType    String      // TMP, QO2, WoWV, LLP
  metadata          Json?
  createdAt         DateTime    @default(now())
  
  document          Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, questionId])
  @@index([assessmentType])
  @@index([category])
}

// Enum for document types
enum DocumentType {
  HANDBOOK
  QUESTIONNAIRE
  REPORT
  RESEARCH
}
