generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model User {
  id                String        @id @default(cuid())
  clerkId           String        @unique
  email             String        @unique
  name              String?
  imageUrl          String?
  role              UserRole      @default(MANAGER)
  journeyStatus     JourneyStatus @default(ONBOARDING)
  currentAgent      String?
  completedSteps    String[]      @default([])
  lastActivity      DateTime      @default(now())
  onboardingData    Json?
  teamId            String?
  department        String?
  profileData       Json?
  engagementMetrics Json?
  assessmentStatus  Json?
  deletedAt         DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  managedTeams      Team[]        @relation("TeamManager")
  team              Team?         @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([clerkId])
  @@index([journeyStatus])
}

model Team {
  id                   String    @id @default(cuid())
  name                 String
  managerId            String
  department           String?
  maturityIndicators   Json?
  performanceData      Json?
  transformationStatus String    @default("pending")
  currentProgram       String?
  programStartDate     DateTime?
  programEndDate       DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  manager              User      @relation("TeamManager", fields: [managerId], references: [id])
  members              User[]

  @@index([managerId])
}

model Conversation {
  id                  String               @id @default(cuid())
  teamId              String
  managerId           String
  currentAgent        String
  phase               String
  contextData         Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  events              AgentEvent[]
  guardrailChecks     GuardrailCheck[]
  messages            Message[]
  variableExtractions VariableExtraction[]

  @@index([teamId])
  @@index([managerId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  agent          String?
  metadata       Json?
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model AgentEvent {
  id             String       @id @default(cuid())
  conversationId String
  type           String
  agent          String
  content        String
  metadata       Json?
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([type])
}

model GuardrailCheck {
  id             String       @id @default(cuid())
  conversationId String
  agentName      String
  guardrailType  String
  input          String
  passed         Boolean
  severity       String?
  reasoning      String
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([guardrailType])
  @@index([passed])
}

model VariableExtraction {
  id             String       @id @default(cuid())
  conversationId String
  agentName      String
  fieldName      String
  attempted      Boolean
  successful     Boolean
  extractedValue String?
  confidence     Float?
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([fieldName])
  @@index([successful])
}

model AgentConfiguration {
  id              String   @id @default(cuid())
  agentName       String
  version         Int
  prompts         Json
  flowConfig      Json
  extractionRules Json
  guardrailConfig Json?
  active          Boolean  @default(false)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([agentName, version])
  @@index([agentName, active])
}

model Document {
  id                 String              @id @default(dbgenerated("(gen_random_uuid())::text"))
  title              String
  sourcePath         String              @unique
  documentType       DocumentType
  content            String
  metadata           Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  chunks             DocumentChunk[]
  questionnaireItems QuestionnaireItem[]

  @@index([documentType])
  @@index([documentType], map: "document_type_idx")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model DocumentChunk {
  id         String                 @id @default(dbgenerated("(gen_random_uuid())::text"))
  documentId String
  chunkIndex Int
  content    String
  embedding  Unsupported("vector")?
  metadata   Json?
  createdAt  DateTime               @default(now())
  document   Document               @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([chunkIndex])
  @@index([embedding], map: "document_chunk_embedding_idx")
}

model QuestionnaireItem {
  id              String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  documentId      String
  questionId      String
  questionText    String
  responseOptions Json?
  scoringFormula  String?
  category        String?
  assessmentType  String
  metadata        Json?
  createdAt       DateTime @default(now())
  document        Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, questionId])
  @@index([assessmentType])
  @@index([category])
  @@index([assessmentType], map: "questionnaire_assessment_type_idx")
  @@index([category], map: "questionnaire_category_idx")
}

enum UserRole {
  TEAM_MEMBER
  MANAGER
  ADMIN
}

enum JourneyStatus {
  ONBOARDING
  ACTIVE
  DORMANT
}

enum DocumentType {
  HANDBOOK
  QUESTIONNAIRE
  REPORT
  RESEARCH
}
