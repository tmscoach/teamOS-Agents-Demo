name: CI

on:
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  lint-type-format:
    name: Lint, Type Check & Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better change detection

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      # Run all checks in parallel
      - name: Run checks in parallel
        run: |
          npm run lint &
          lint_pid=$!
          
          npm run type-check &
          type_pid=$!
          
          npm run format:check &
          format_pid=$!
          
          # Wait for all background jobs and capture their exit codes
          wait $lint_pid
          lint_exit=$?
          
          wait $type_pid
          type_exit=$?
          
          wait $format_pid
          format_exit=$?
          
          # Exit with error if any check failed
          if [ $lint_exit -ne 0 ] || [ $type_exit -ne 0 ] || [ $format_exit -ne 0 ]; then
            echo "One or more checks failed"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint-type-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}